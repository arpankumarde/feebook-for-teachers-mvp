generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  phone       Int          @unique
  password    String
  name        String
  role        UserRole
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  admin       Admin?
  institution Institution?

  @@index([email, role])
  @@index([name])
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Institution {
  id                String             @id @default(uuid())
  userId            String             @unique
  name              String
  address           String?
  city              String?
  state             String?
  pincode           String?
  isVerified        Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  enrollments       Enrollment[]
  fees              Fee[]
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments          Payment[]
  financialAccount  FinancialAccount?
  financialRequests FinancialRequest[]
}

model Enrollment {
  id            String      @id @default(uuid())
  institutionId String
  studentName   String
  studentEmail  String?
  studentPhone  String?
  enrollmentId  String      @unique
  joinDate      DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  fees          Fee[]
  payments      Payment[]

  @@index([enrollmentId])
  @@index([institutionId])
}

model Fee {
  id               String            @id @default(uuid())
  enrollmentId     String
  institutionId    String
  title            String
  totalAmount      Decimal           @db.Decimal(10, 2)
  monthlyAmount    Decimal           @db.Decimal(10, 2)
  startDate        DateTime
  endDate          DateTime
  paidAmount       Decimal           @default(0) @db.Decimal(10, 2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  enrollment       Enrollment        @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  institution      Institution       @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  paymentSchedules PaymentSchedule[]

  @@index([enrollmentId, institutionId])
  @@index([startDate, endDate])
}

model PaymentSchedule {
  id                 String    @id @default(uuid())
  month              DateTime
  isPaid             Boolean   @default(false)
  manuallyMarkedPaid Boolean   @default(false)
  dueAmount          Decimal   @db.Decimal(10, 2)
  paidAmount         Decimal   @default(0) @db.Decimal(10, 2)
  dueDate            DateTime
  paidDate           DateTime?
  feeId              String
  fee                Fee       @relation(fields: [feeId], references: [id], onDelete: Cascade)
  orders             Order[]
  Invoice            Invoice?

  @@unique([feeId, month])
}

model Order {
  id                String          @id @default(uuid())
  paymentScheduleId String
  cfOrderId         String          @unique
  orderId           String          @unique
  amount            Decimal         @db.Decimal(10, 2)
  currency          String          @default("INR")
  status            OrderStatus     @default(ACTIVE)
  customer          Json?
  orderMeta         Json?
  orderTags         Json?
  expiryTime        DateTime?
  orderNote         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentSchedule   PaymentSchedule @relation(fields: [paymentScheduleId], references: [id])
  Payment           Payment?

  @@index([paymentScheduleId])
}

model Payment {
  id                    String                @id @default(uuid())
  orderId               String                @unique
  cfPaymentId           String                @unique
  paymentStatus         PaymentStates
  paymentAmount         Decimal               @db.Decimal(10, 2)
  paymentCurrency       String
  paymentMessage        String
  paymentTime           DateTime
  bankReference         String
  paymentMethod         Json
  paymentGroup          String
  paymentGatewayDetails Json
  paymentOffers         Json[]                @default([])
  errorDetails          Json?
  terminalDetails       Json?
  webhookResponse       Json
  webhookAttempt        Int                   @default(0)
  webhookSignature      String
  webhookTimestamp      DateTime
  webhookVersion        String
  IdempotencyKey        String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  institutionId         String?
  enrollmentId          String?
  order                 Order                 @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Institution           Institution?          @relation(fields: [institutionId], references: [id])
  Enrollment            Enrollment?           @relation(fields: [enrollmentId], references: [id])
  settlement            FinancialTransaction?

  @@index([paymentStatus])
  @@index([institutionId, enrollmentId])
}

model Invoice {
  id                String          @id @default(uuid())
  paymentScheduleId String          @unique
  invoiceNumber     String          @unique
  generatedDate     DateTime        @default(now())
  pdfUrl            String?
  paymentSchedule   PaymentSchedule @relation(fields: [paymentScheduleId], references: [id], onDelete: Cascade)
}

model FinancialAccount {
  id            String                 @id @default(uuid())
  institutionId String                 @unique
  balance       Decimal                @default(0) @db.Decimal(10, 2)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now()) @updatedAt
  institution   Institution            @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  transactions  FinancialTransaction[]
}

model FinancialTransaction {
  id          String            @id @default(uuid())
  accountId   String
  amount      Decimal           @db.Decimal(10, 2)
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String?
  paymentId   String?           @unique
  payment     Payment?          @relation(fields: [paymentId], references: [id])
  requestId   String?           @unique
  request     FinancialRequest? @relation(fields: [requestId], references: [id])
  processedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  account     FinancialAccount  @relation(fields: [accountId], references: [id])

  @@index([accountId])
  @@index([type])
}

model FinancialRequest {
  id             String                @id @default(uuid())
  institutionId  String
  amount         Decimal               @db.Decimal(10, 2)
  type           FinancialRequestType
  status         RequestStatus         @default(PENDING)
  accountDetails Json?
  remarks        String?
  requestedAt    DateTime              @default(now())
  processedAt    DateTime?
  updatedAt      DateTime              @updatedAt
  institution    Institution           @relation(fields: [institutionId], references: [id])
  transaction    FinancialTransaction?

  @@index([institutionId])
  @@index([status])
  @@index([type])
  @@index([requestedAt])
}

enum UserRole {
  ADMIN
  INSTITUTION
}

enum OrderStatus {
  ACTIVE
  PAID
  EXPIRED
  TERMINATED
  TERMINATION_REQUESTED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentStates {
  FAILED
  NOT_ATTEMPTED
  PENDING
  FLAGGED
  CANCELLED
  VOID
  USER_DROPPED
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}

enum TransactionType {
  PAYMENT_SETTLEMENT
  WITHDRAWAL
  REFUND
  ADJUSTMENT
  FEE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum FinancialRequestType {
  WITHDRAWAL
  REFUND
  ADJUSTMENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum AccountType {
  SAVINGS
  CURRENT
}
