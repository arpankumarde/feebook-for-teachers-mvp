generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  email       String       @unique
  phone       Int          @unique
  password    String
  name        String
  role        UserRole
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  admin       Admin?
  institution Institution?
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Institution {
  id          String              @id @default(uuid())
  userId      String              @unique
  name        String
  address     String?
  city        String?
  state       String?
  pincode     String?
  isVerified  Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  enrollments Enrollment[]
  fees        Fee[]
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
  wallet      Wallet?
  withdrawals WithdrawalRequest[]
}

model Enrollment {
  id            String      @id @default(uuid())
  institutionId String
  studentName   String
  studentEmail  String?
  studentPhone  String?
  enrollmentId  String      @unique
  joinDate      DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  institution   Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  fees          Fee[]
  payments      Payment[]

  @@index([enrollmentId])
}

model Fee {
  id               String            @id @default(uuid())
  enrollmentId     String
  institutionId    String
  title            String
  totalAmount      Decimal           @db.Decimal(10, 2)
  monthlyAmount    Decimal           @db.Decimal(10, 2)
  startDate        DateTime
  endDate          DateTime
  paidAmount       Decimal           @default(0) @db.Decimal(10, 2)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  enrollment       Enrollment        @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  institution      Institution       @relation(fields: [institutionId], references: [id])
  payments         Payment[]
  paymentSchedules PaymentSchedule[]
}

model PaymentSchedule {
  id                 String    @id @default(uuid())
  month              DateTime
  isPaid             Boolean   @default(false)
  manuallyMarkedPaid Boolean   @default(false)
  dueAmount          Decimal   @db.Decimal(10, 2)
  paidAmount         Decimal   @default(0) @db.Decimal(10, 2)
  dueDate            DateTime
  paidDate           DateTime?
  feeId              String
  payments           Payment[]
  fee                Fee       @relation(fields: [feeId], references: [id], onDelete: Cascade)
  orders             Order[]

  @@unique([feeId, month])
}

model Payment {
  id                String           @id @default(uuid())
  amount            Decimal          @db.Decimal(10, 2)
  method            PaymentMethod
  status            PaymentStatus    @default(PENDING)
  transactionId     String?
  paymentDate       DateTime         @default(now())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  institutionId     String
  GatewayResponse   Json?
  enrollmentId      String
  feeId             String?
  payerEmail        String?
  payerName         String?
  payerPhone        String?
  remarks           String?
  paymentScheduleId String?
  paymentSessionId  String?
  invoice           Invoice?
  enrollment        Enrollment       @relation(fields: [enrollmentId], references: [id])
  fee               Fee?             @relation(fields: [feeId], references: [id])
  institution       Institution      @relation(fields: [institutionId], references: [id])
  paymentSchedule   PaymentSchedule? @relation(fields: [paymentScheduleId], references: [id])
}

model Invoice {
  id            String   @id @default(uuid())
  paymentId     String   @unique
  invoiceNumber String   @unique
  generatedDate DateTime @default(now())
  pdfUrl        String?
  payment       Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
}

model Wallet {
  id            String        @id @default(uuid())
  institutionId String        @unique
  balance       Decimal       @default(0) @db.Decimal(10, 2)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  transactions  Transaction[]
  institution   Institution   @relation(fields: [institutionId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          String   @id @default(uuid())
  walletId    String
  amount      Decimal  @db.Decimal(10, 2)
  type        String
  description String?
  refId       String?
  createdAt   DateTime @default(now())
  wallet      Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model WithdrawalRequest {
  id            String           @id @default(uuid())
  institutionId String
  amount        Decimal          @db.Decimal(10, 2)
  status        WithdrawalStatus @default(PENDING)
  accountNumber String?
  ifsc          String?
  bankName      String?
  accountName   String?
  accountType   AccountType      @default(SAVINGS)
  remarks       String?
  requestedAt   DateTime         @default(now())
  processedAt   DateTime?
  updatedAt     DateTime         @updatedAt
  institution   Institution      @relation(fields: [institutionId], references: [id])
}

model Order {
  id                String          @id @default(uuid())
  paymentScheduleId String
  cfOrderId         String          @unique
  orderId           String          @unique
  amount            Decimal         @db.Decimal(10, 2)
  currency          String          @default("INR")
  status            OrderStatus     @default(ACTIVE)
  customer          Json?
  orderMeta         Json?
  orderTags         Json?
  expiryTime        DateTime?
  orderNote         String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  paymentSchedule   PaymentSchedule @relation(fields: [paymentScheduleId], references: [id])
}

enum UserRole {
  ADMIN
  INSTITUTION
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  ACTIVE
  PAID
  EXPIRED
  TERMINATED
  TERMINATION_REQUESTED
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum AccountType {
  SAVINGS
  CURRENT
}
